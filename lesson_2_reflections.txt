What happens when you initialize a repository? Why do you need to do it?

An empty git repository is initialized. A .git folder is created. There are no commits yet.
Hence, git log gives that there are no commits.
git status gives :

navin (master #) reflections $ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	Comands
	lesson_1_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)

--------------------------------------------------------------------------
How is the staging area different from the working directory and the repository?
What value do you think it offers?

The files to be comitted in the next commit are added to the staging area using the git add.
Whatever Already existing files in the working directory that need to be commit can be added
to the staging area using the git add. This gives us the value that not all files but related
files can be committed together.

--------------------------------------------------------------------------
How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

